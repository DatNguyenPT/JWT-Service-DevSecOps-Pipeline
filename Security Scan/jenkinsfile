pipeline {
    agent any

    tools {
        jdk 'jdk-17'
        maven 'maven3'
    }

    environment {
        SCANNER_HOME = tool 'sonar-scanner'
    }

    stages { 

        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Checkout from Git') {
            steps {
                git branch: 'jwt_service', 
                    url: 'https://github.com/DatNguyenPT/AI-Image-Generator.git', 
                    credentialsId: 'github_creds'
            }
        }

        stage('Build and Test') {
            steps {
                script {
                    sh 'mvn clean verify -Dmaven.test.failure.ignore=true -P cicd'
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sonar-server') {
                    sh '''
                    $SCANNER_HOME/bin/sonar-scanner \
                    -Dsonar.projectName=jwt_service \
                    -Dsonar.projectKey=jwt_service \
                    -Dsonar.java.binaries=target/classes \
                    -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml
                    '''
                }
            }
        }

        stage('Quality Gate') {
            steps {
                script {
                    waitForQualityGate abortPipeline: false
                }
            }
        }

        stage('OWASP Dependency Check') {
            steps {
                dependencyCheck additionalArguments: '--scan ./', odcInstallation: 'dp-check'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }

        stage('Check Code Coverage') {
            steps {
                script {
                    def coverage = sh(
                        script: '''
                        MISSED=$(grep -oP 'missed="\\K\\d+' target/site/jacoco/jacoco.xml | awk '{s+=$1} END {print s}')
                        COVERED=$(grep -oP 'covered="\\K\\d+' target/site/jacoco/jacoco.xml | awk '{s+=$1} END {print s}')
                        if [ $((MISSED + COVERED)) -eq 0 ]; then
                            echo "0"
                        else
                            echo $((COVERED * 100 / (MISSED + COVERED)))
                        fi
                        ''',
                        returnStdout: true
                    ).trim()

                    echo "Code Coverage: ${coverage}%"

                    if (coverage.toInteger() < 50) {
                        withCredentials([
                            string(credentialsId: 'telegram_chat_id', variable: 'CHAT_ID'),
                            string(credentialsId: 'telegram_bot_id', variable: 'BOT_ID')
                        ]) {
                            sh '''
                            curl -X POST -H "Content-Type: application/json" \
                            -d '{"chat_id": "'${CHAT_ID}'", "text": "[⚠️WARNING] Code Coverage is below 50% (${coverage}%) 🚨 Please improve your tests!", "disable_notification": false}' \
                            "https://api.telegram.org/bot${BOT_ID}/sendMessage"
                            '''
                        }
                    }
                }
            }
        }
    }

    post {
        success {
            script {
                withCredentials([
                    string(credentialsId: 'telegram_chat_id', variable: 'CHAT_ID'),
                    string(credentialsId: 'telegram_bot_id', variable: 'BOT_ID')
                ]) {
                    sh '''
                    curl -X POST -H "Content-Type: application/json" \
                    -d '{"chat_id": "'${CHAT_ID}'", "text": "[✅SUCCESS] JWT API Pipeline for security scanning build succeeded 🎉", "disable_notification": false}' \
                    "https://api.telegram.org/bot${BOT_ID}/sendMessage"
                    '''
                }
            }
        }
        failure {
            script {
                withCredentials([
                    string(credentialsId: 'telegram_chat_id', variable: 'CHAT_ID'),
                    string(credentialsId: 'telegram_bot_id', variable: 'BOT_ID')
                ]) {
                    sh '''
                    curl -X POST -H "Content-Type: application/json" \
                    -d '{"chat_id": "'${CHAT_ID}'", "text": "[💀FAILED] JWT API Pipeline for security scanning build failed 😭😭😭!", "disable_notification": false}' \
                    "https://api.telegram.org/bot${BOT_ID}/sendMessage"
                    '''
                }
            }
        }
    }
}
